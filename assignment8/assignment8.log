2025-06-12 01:01:25 - 10620 - __main__ - mcp_sse_server.py:181 - INFO - STARTING
2025-06-12 01:01:39 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getMe "HTTP/1.1 200 OK"
2025-06-12 01:01:39 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/deleteWebhook "HTTP/1.1 200 OK"
2025-06-12 01:01:39 - 5232 - telegram.ext.Application - _application.py:630 - INFO - Application started
2025-06-12 01:01:40 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:01:40 - 5232 - mcp.client.sse - sse.py:55 - INFO - Connecting to SSE endpoint: http://localhost:9135/sse
2025-06-12 01:01:42 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: GET http://localhost:9135/sse "HTTP/1.1 200 OK"
2025-06-12 01:01:42 - 5232 - mcp.client.sse - sse.py:75 - INFO - Received endpoint URL: http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5
2025-06-12 01:01:42 - 5232 - mcp.client.sse - sse.py:148 - INFO - Starting post writer with endpoint URL: http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5
2025-06-12 01:01:42 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:01:42 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:01:42 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:01:42 - 10620 - mcp.server.lowlevel.server - server.py:551 - INFO - Processing request of type ListToolsRequest
2025-06-12 01:01:43 - 5232 - google_genai.models - models.py:5622 - INFO - AFC is enabled with max remote calls: 10.
2025-06-12 01:01:44 - 5232 - httpx - _client.py:1025 - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-06-12 01:01:44 - 5232 - google_genai.models - models.py:5633 - INFO - AFC remote call 1 is done.
2025-06-12 01:01:44 - 5232 - __main__ - mcp_sse_client.py:44 - INFO - LLM response: candidates=[Candidate(content=Content(parts=[Part(video_metadata=None, thought=None, inline_data=None, code_execution_result=None, executable_code=None, file_data=None, function_call=None, function_response=None, text='{\n  "function_name": "get_current_f1_standings",\n  "params": [],\n  "final_ans": "None",\n  "reasoning_type": "search"\n}')], role='model'), citation_metadata=None, finish_message=None, token_count=None, finish_reason=<FinishReason.STOP: 'STOP'>, url_context_metadata=None, avg_logprobs=-3.376199856575113e-06, grounding_metadata=None, index=None, logprobs_result=None, safety_ratings=None)] create_time=None response_id=None model_version='gemini-2.0-flash' prompt_feedback=None usage_metadata=GenerateContentResponseUsageMetadata(cache_tokens_details=None, cached_content_token_count=None, candidates_token_count=48, candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=48)], prompt_token_count=1358, prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=1358)], thoughts_token_count=None, tool_use_prompt_token_count=None, tool_use_prompt_tokens_details=None, total_token_count=1406, traffic_type=None) automatic_function_calling_history=[] parsed=Response(function_name='get_current_f1_standings', params=[], final_ans='None', reasoning_type='search')
2025-06-12 01:01:44 - 5232 - __main__ - mcp_sse_client.py:51 - INFO - Parsed llm response: {'function_name': 'get_current_f1_standings', 'params': [], 'final_ans': 'None', 'reasoning_type': 'search'}
2025-06-12 01:01:44 - 5232 - action - action.py:13 - INFO - Executing tool: name='get_current_f1_standings' description='Fetches the latest F1 standings and writes the data in google sheets. Returns the sheet link.' inputSchema={'properties': {}, 'title': 'get_current_f1_standingsArguments', 'type': 'object'} annotations=None, with params: []
2025-06-12 01:01:44 - 5232 - action - action.py:32 - INFO - Sending arguement: {}
2025-06-12 01:01:44 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:01:44 - 10620 - mcp.server.lowlevel.server - server.py:551 - INFO - Processing request of type CallToolRequest
2025-06-12 01:01:44 - 10620 - __main__ - mcp_sse_server.py:55 - INFO - Standings fetched: {0: ['1', 'Oscar Piastri', 'Australian', 'McLaren', '186'], 1: ['2', 'Lando Norris', 'British', 'McLaren', '176'], 2: ['3', 'Max Verstappen', 'Dutch', 'Red Bull', '137'], 3: ['4', 'George Russell', 'British', 'Mercedes', '111'], 4: ['5', 'Charles Leclerc', 'Monegasque', 'Ferrari', '94'], 5: ['6', 'Lewis Hamilton', 'British', 'Ferrari', '71'], 6: ['7', 'Andrea Kimi Antonelli', 'Italian', 'Mercedes', '48'], 7: ['8', 'Alexander Albon', 'Thai', 'Williams', '42'], 8: ['9', 'Isack Hadjar', 'French', 'RB F1 Team', '21'], 9: ['10', 'Esteban Ocon', 'French', 'Haas F1 Team', '20'], 10: ['11', 'Nico Hülkenberg', 'German', 'Sauber', '16'], 11: ['12', 'Lance Stroll', 'Canadian', 'Aston Martin', '14'], 12: ['13', 'Carlos Sainz', 'Spanish', 'Williams', '12'], 13: ['14', 'Pierre Gasly', 'French', 'Alpine F1 Team', '11'], 14: ['15', 'Yuki Tsunoda', 'Japanese', 'RB F1 Team', '10'], 15: ['16', 'Oliver Bearman', 'British', 'Haas F1 Team', '6'], 16: ['17', 'Liam Lawson', 'New Zealander', 'Red Bull', '4'], 17: ['18', 'Fernando Alonso', 'Spanish', 'Aston Martin', '2'], 18: ['19', 'Gabriel Bortoleto', 'Brazilian', 'Sauber', '0'], 19: ['20', 'Jack Doohan', 'Australian', 'Alpine F1 Team', '0'], 20: ['21', 'Franco Colapinto', 'Argentine', 'Alpine F1 Team', '0']}
2025-06-12 01:01:44 - 10620 - mcp.server.lowlevel.server - server.py:541 - INFO - Warning: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api.jolpi.ca'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
2025-06-12 01:01:44 - 5232 - action - action.py:34 - INFO - meta=None content=[TextContent(type='text', text='{\n  "0": [\n    "1",\n    "Oscar Piastri",\n    "Australian",\n    "McLaren",\n    "186"\n  ],\n  "1": [\n    "2",\n    "Lando Norris",\n    "British",\n    "McLaren",\n    "176"\n  ],\n  "2": [\n    "3",\n    "Max Verstappen",\n    "Dutch",\n    "Red Bull",\n    "137"\n  ],\n  "3": [\n    "4",\n    "George Russell",\n    "British",\n    "Mercedes",\n    "111"\n  ],\n  "4": [\n    "5",\n    "Charles Leclerc",\n    "Monegasque",\n    "Ferrari",\n    "94"\n  ],\n  "5": [\n    "6",\n    "Lewis Hamilton",\n    "British",\n    "Ferrari",\n    "71"\n  ],\n  "6": [\n    "7",\n    "Andrea Kimi Antonelli",\n    "Italian",\n    "Mercedes",\n    "48"\n  ],\n  "7": [\n    "8",\n    "Alexander Albon",\n    "Thai",\n    "Williams",\n    "42"\n  ],\n  "8": [\n    "9",\n    "Isack Hadjar",\n    "French",\n    "RB F1 Team",\n    "21"\n  ],\n  "9": [\n    "10",\n    "Esteban Ocon",\n    "French",\n    "Haas F1 Team",\n    "20"\n  ],\n  "10": [\n    "11",\n    "Nico Hülkenberg",\n    "German",\n    "Sauber",\n    "16"\n  ],\n  "11": [\n    "12",\n    "Lance Stroll",\n    "Canadian",\n    "Aston Martin",\n    "14"\n  ],\n  "12": [\n    "13",\n    "Carlos Sainz",\n    "Spanish",\n    "Williams",\n    "12"\n  ],\n  "13": [\n    "14",\n    "Pierre Gasly",\n    "French",\n    "Alpine F1 Team",\n    "11"\n  ],\n  "14": [\n    "15",\n    "Yuki Tsunoda",\n    "Japanese",\n    "RB F1 Team",\n    "10"\n  ],\n  "15": [\n    "16",\n    "Oliver Bearman",\n    "British",\n    "Haas F1 Team",\n    "6"\n  ],\n  "16": [\n    "17",\n    "Liam Lawson",\n    "New Zealander",\n    "Red Bull",\n    "4"\n  ],\n  "17": [\n    "18",\n    "Fernando Alonso",\n    "Spanish",\n    "Aston Martin",\n    "2"\n  ],\n  "18": [\n    "19",\n    "Gabriel Bortoleto",\n    "Brazilian",\n    "Sauber",\n    "0"\n  ],\n  "19": [\n    "20",\n    "Jack Doohan",\n    "Australian",\n    "Alpine F1 Team",\n    "0"\n  ],\n  "20": [\n    "21",\n    "Franco Colapinto",\n    "Argentine",\n    "Alpine F1 Team",\n    "0"\n  ]\n}', annotations=None)] isError=False
2025-06-12 01:01:44 - 5232 - google_genai.models - models.py:5622 - INFO - AFC is enabled with max remote calls: 10.
2025-06-12 01:01:48 - 5232 - httpx - _client.py:1025 - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-06-12 01:01:48 - 5232 - google_genai.models - models.py:5633 - INFO - AFC remote call 1 is done.
2025-06-12 01:01:48 - 5232 - __main__ - mcp_sse_client.py:44 - INFO - LLM response: candidates=[Candidate(content=Content(parts=[Part(video_metadata=None, thought=None, inline_data=None, code_execution_result=None, executable_code=None, file_data=None, function_call=None, function_response=None, text='{\n  "function_name": "upload_data_to_sheets",\n  "params": [\n    "{\\"0\\": [\\"1\\", \\"Oscar Piastri\\", \\"Australian\\", \\"McLaren\\", \\"186\\"], \\"1\\": [\\"2\\", \\"Lando Norris\\", \\"British\\", \\"McLaren\\", \\"176\\"], \\"2\\": [\\"3\\", \\"Max Verstappen\\", \\"Dutch\\", \\"Red Bull\\", \\"137\\"], \\"3\\": [\\"4\\", \\"George Russell\\", \\"British\\", \\"Mercedes\\", \\"111\\"], \\"4\\": [\\"5\\", \\"Charles Leclerc\\", \\"Monegasque\\", \\"Ferrari\\", \\"94\\"], \\"5\\": [\\"6\\", \\"Lewis Hamilton\\", \\"British\\", \\"Ferrari\\", \\"71\\"], \\"6\\": [\\"7\\", \\"Andrea Kimi Antonelli\\", \\"Italian\\", \\"Mercedes\\", \\"48\\"], \\"7\\": [\\"8\\", \\"Alexander Albon\\", \\"Thai\\", \\"Williams\\", \\"42\\"], \\"8\\": [\\"9\\", \\"Isack Hadjar\\", \\"French\\", \\"RB F1 Team\\", \\"21\\"], \\"9\\": [\\"10\\", \\"Esteban Ocon\\", \\"French\\", \\"Haas F1 Team\\", \\"20\\"], \\"10\\": [\\"11\\", \\"Nico Hülkenberg\\", \\"German\\", \\"Sauber\\", \\"16\\"], \\"11\\": [\\"12\\", \\"Lance Stroll\\", \\"Canadian\\", \\"Aston Martin\\", \\"14\\"], \\"12\\": [\\"13\\", \\"Carlos Sainz\\", \\"Spanish\\", \\"Williams\\", \\"12\\"], \\"13\\": [\\"14\\", \\"Pierre Gasly\\", \\"French\\", \\"Alpine F1 Team\\", \\"11\\"], \\"14\\": [\\"15\\", \\"Yuki Tsunoda\\", \\"Japanese\\", \\"RB F1 Team\\", \\"10\\"], \\"15\\": [\\"16\\", \\"Oliver Bearman\\", \\"British\\", \\"Haas F1 Team\\", \\"6\\"], \\"16\\": [\\"17\\", \\"Liam Lawson\\", \\"New Zealander\\", \\"Red Bull\\", \\"4\\"], \\"17\\": [\\"18\\", \\"Fernando Alonso\\", \\"Spanish\\", \\"Aston Martin\\", \\"2\\"], \\"18\\": [\\"19\\", \\"Gabriel Bortoleto\\", \\"Brazilian\\", \\"Sauber\\", \\"0\\"], \\"19\\": [\\"20\\", \\"Jack Doohan\\", \\"Australian\\", \\"Alpine F1 Team\\", \\"0\\"], \\"20\\": [\\"21\\", \\"Franco Colapinto\\", \\"Argentine\\", \\"Alpine F1 Team\\", \\"0\\"]} "\n  ],\n  "final_ans": "None",\n  "reasoning_type": "search"\n}')], role='model'), citation_metadata=None, finish_message=None, token_count=None, finish_reason=<FinishReason.STOP: 'STOP'>, url_context_metadata=None, avg_logprobs=-0.003716428401106495, grounding_metadata=None, index=None, logprobs_result=None, safety_ratings=None)] create_time=None response_id=None model_version='gemini-2.0-flash' prompt_feedback=None usage_metadata=GenerateContentResponseUsageMetadata(cache_tokens_details=None, cached_content_token_count=None, candidates_token_count=590, candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=590)], prompt_token_count=1928, prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=1928)], thoughts_token_count=None, tool_use_prompt_token_count=None, tool_use_prompt_tokens_details=None, total_token_count=2518, traffic_type=None) automatic_function_calling_history=[] parsed=Response(function_name='upload_data_to_sheets', params=['{"0": ["1", "Oscar Piastri", "Australian", "McLaren", "186"], "1": ["2", "Lando Norris", "British", "McLaren", "176"], "2": ["3", "Max Verstappen", "Dutch", "Red Bull", "137"], "3": ["4", "George Russell", "British", "Mercedes", "111"], "4": ["5", "Charles Leclerc", "Monegasque", "Ferrari", "94"], "5": ["6", "Lewis Hamilton", "British", "Ferrari", "71"], "6": ["7", "Andrea Kimi Antonelli", "Italian", "Mercedes", "48"], "7": ["8", "Alexander Albon", "Thai", "Williams", "42"], "8": ["9", "Isack Hadjar", "French", "RB F1 Team", "21"], "9": ["10", "Esteban Ocon", "French", "Haas F1 Team", "20"], "10": ["11", "Nico Hülkenberg", "German", "Sauber", "16"], "11": ["12", "Lance Stroll", "Canadian", "Aston Martin", "14"], "12": ["13", "Carlos Sainz", "Spanish", "Williams", "12"], "13": ["14", "Pierre Gasly", "French", "Alpine F1 Team", "11"], "14": ["15", "Yuki Tsunoda", "Japanese", "RB F1 Team", "10"], "15": ["16", "Oliver Bearman", "British", "Haas F1 Team", "6"], "16": ["17", "Liam Lawson", "New Zealander", "Red Bull", "4"], "17": ["18", "Fernando Alonso", "Spanish", "Aston Martin", "2"], "18": ["19", "Gabriel Bortoleto", "Brazilian", "Sauber", "0"], "19": ["20", "Jack Doohan", "Australian", "Alpine F1 Team", "0"], "20": ["21", "Franco Colapinto", "Argentine", "Alpine F1 Team", "0"]} '], final_ans='None', reasoning_type='search')
2025-06-12 01:01:48 - 5232 - __main__ - mcp_sse_client.py:51 - INFO - Parsed llm response: {'function_name': 'upload_data_to_sheets', 'params': ['{"0": ["1", "Oscar Piastri", "Australian", "McLaren", "186"], "1": ["2", "Lando Norris", "British", "McLaren", "176"], "2": ["3", "Max Verstappen", "Dutch", "Red Bull", "137"], "3": ["4", "George Russell", "British", "Mercedes", "111"], "4": ["5", "Charles Leclerc", "Monegasque", "Ferrari", "94"], "5": ["6", "Lewis Hamilton", "British", "Ferrari", "71"], "6": ["7", "Andrea Kimi Antonelli", "Italian", "Mercedes", "48"], "7": ["8", "Alexander Albon", "Thai", "Williams", "42"], "8": ["9", "Isack Hadjar", "French", "RB F1 Team", "21"], "9": ["10", "Esteban Ocon", "French", "Haas F1 Team", "20"], "10": ["11", "Nico Hülkenberg", "German", "Sauber", "16"], "11": ["12", "Lance Stroll", "Canadian", "Aston Martin", "14"], "12": ["13", "Carlos Sainz", "Spanish", "Williams", "12"], "13": ["14", "Pierre Gasly", "French", "Alpine F1 Team", "11"], "14": ["15", "Yuki Tsunoda", "Japanese", "RB F1 Team", "10"], "15": ["16", "Oliver Bearman", "British", "Haas F1 Team", "6"], "16": ["17", "Liam Lawson", "New Zealander", "Red Bull", "4"], "17": ["18", "Fernando Alonso", "Spanish", "Aston Martin", "2"], "18": ["19", "Gabriel Bortoleto", "Brazilian", "Sauber", "0"], "19": ["20", "Jack Doohan", "Australian", "Alpine F1 Team", "0"], "20": ["21", "Franco Colapinto", "Argentine", "Alpine F1 Team", "0"]} '], 'final_ans': 'None', 'reasoning_type': 'search'}
2025-06-12 01:01:48 - 5232 - action - action.py:13 - INFO - Executing tool: name='upload_data_to_sheets' description='' inputSchema={'properties': {'data': {'additionalProperties': True, 'title': 'Data', 'type': 'object'}}, 'required': ['data'], 'title': 'upload_data_to_sheetsArguments', 'type': 'object'} annotations=None, with params: ['{"0": ["1", "Oscar Piastri", "Australian", "McLaren", "186"], "1": ["2", "Lando Norris", "British", "McLaren", "176"], "2": ["3", "Max Verstappen", "Dutch", "Red Bull", "137"], "3": ["4", "George Russell", "British", "Mercedes", "111"], "4": ["5", "Charles Leclerc", "Monegasque", "Ferrari", "94"], "5": ["6", "Lewis Hamilton", "British", "Ferrari", "71"], "6": ["7", "Andrea Kimi Antonelli", "Italian", "Mercedes", "48"], "7": ["8", "Alexander Albon", "Thai", "Williams", "42"], "8": ["9", "Isack Hadjar", "French", "RB F1 Team", "21"], "9": ["10", "Esteban Ocon", "French", "Haas F1 Team", "20"], "10": ["11", "Nico Hülkenberg", "German", "Sauber", "16"], "11": ["12", "Lance Stroll", "Canadian", "Aston Martin", "14"], "12": ["13", "Carlos Sainz", "Spanish", "Williams", "12"], "13": ["14", "Pierre Gasly", "French", "Alpine F1 Team", "11"], "14": ["15", "Yuki Tsunoda", "Japanese", "RB F1 Team", "10"], "15": ["16", "Oliver Bearman", "British", "Haas F1 Team", "6"], "16": ["17", "Liam Lawson", "New Zealander", "Red Bull", "4"], "17": ["18", "Fernando Alonso", "Spanish", "Aston Martin", "2"], "18": ["19", "Gabriel Bortoleto", "Brazilian", "Sauber", "0"], "19": ["20", "Jack Doohan", "Australian", "Alpine F1 Team", "0"], "20": ["21", "Franco Colapinto", "Argentine", "Alpine F1 Team", "0"]} ']
2025-06-12 01:01:48 - 5232 - action - action.py:18 - INFO - param_name: data, info: {'additionalProperties': True, 'title': 'Data', 'type': 'object'}
2025-06-12 01:01:48 - 5232 - action - action.py:32 - INFO - Sending arguement: {'data': '{"0": ["1", "Oscar Piastri", "Australian", "McLaren", "186"], "1": ["2", "Lando Norris", "British", "McLaren", "176"], "2": ["3", "Max Verstappen", "Dutch", "Red Bull", "137"], "3": ["4", "George Russell", "British", "Mercedes", "111"], "4": ["5", "Charles Leclerc", "Monegasque", "Ferrari", "94"], "5": ["6", "Lewis Hamilton", "British", "Ferrari", "71"], "6": ["7", "Andrea Kimi Antonelli", "Italian", "Mercedes", "48"], "7": ["8", "Alexander Albon", "Thai", "Williams", "42"], "8": ["9", "Isack Hadjar", "French", "RB F1 Team", "21"], "9": ["10", "Esteban Ocon", "French", "Haas F1 Team", "20"], "10": ["11", "Nico Hülkenberg", "German", "Sauber", "16"], "11": ["12", "Lance Stroll", "Canadian", "Aston Martin", "14"], "12": ["13", "Carlos Sainz", "Spanish", "Williams", "12"], "13": ["14", "Pierre Gasly", "French", "Alpine F1 Team", "11"], "14": ["15", "Yuki Tsunoda", "Japanese", "RB F1 Team", "10"], "15": ["16", "Oliver Bearman", "British", "Haas F1 Team", "6"], "16": ["17", "Liam Lawson", "New Zealander", "Red Bull", "4"], "17": ["18", "Fernando Alonso", "Spanish", "Aston Martin", "2"], "18": ["19", "Gabriel Bortoleto", "Brazilian", "Sauber", "0"], "19": ["20", "Jack Doohan", "Australian", "Alpine F1 Team", "0"], "20": ["21", "Franco Colapinto", "Argentine", "Alpine F1 Team", "0"]} '}
2025-06-12 01:01:48 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:01:48 - 10620 - mcp.server.lowlevel.server - server.py:551 - INFO - Processing request of type CallToolRequest
2025-06-12 01:01:48 - 10620 - __main__ - mcp_sse_server.py:63 - INFO - data: {'0': ['1', 'Oscar Piastri', 'Australian', 'McLaren', '186'], '1': ['2', 'Lando Norris', 'British', 'McLaren', '176'], '2': ['3', 'Max Verstappen', 'Dutch', 'Red Bull', '137'], '3': ['4', 'George Russell', 'British', 'Mercedes', '111'], '4': ['5', 'Charles Leclerc', 'Monegasque', 'Ferrari', '94'], '5': ['6', 'Lewis Hamilton', 'British', 'Ferrari', '71'], '6': ['7', 'Andrea Kimi Antonelli', 'Italian', 'Mercedes', '48'], '7': ['8', 'Alexander Albon', 'Thai', 'Williams', '42'], '8': ['9', 'Isack Hadjar', 'French', 'RB F1 Team', '21'], '9': ['10', 'Esteban Ocon', 'French', 'Haas F1 Team', '20'], '10': ['11', 'Nico Hülkenberg', 'German', 'Sauber', '16'], '11': ['12', 'Lance Stroll', 'Canadian', 'Aston Martin', '14'], '12': ['13', 'Carlos Sainz', 'Spanish', 'Williams', '12'], '13': ['14', 'Pierre Gasly', 'French', 'Alpine F1 Team', '11'], '14': ['15', 'Yuki Tsunoda', 'Japanese', 'RB F1 Team', '10'], '15': ['16', 'Oliver Bearman', 'British', 'Haas F1 Team', '6'], '16': ['17', 'Liam Lawson', 'New Zealander', 'Red Bull', '4'], '17': ['18', 'Fernando Alonso', 'Spanish', 'Aston Martin', '2'], '18': ['19', 'Gabriel Bortoleto', 'Brazilian', 'Sauber', '0'], '19': ['20', 'Jack Doohan', 'Australian', 'Alpine F1 Team', '0'], '20': ['21', 'Franco Colapinto', 'Argentine', 'Alpine F1 Team', '0']}, type: <class 'dict'>
2025-06-12 01:01:52 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:01:54 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['1', 'Oscar Piastri', 'Australian', 'McLaren', '186'], type: <class 'list'>
2025-06-12 01:01:54 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['2', 'Lando Norris', 'British', 'McLaren', '176'], type: <class 'list'>
2025-06-12 01:01:55 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['3', 'Max Verstappen', 'Dutch', 'Red Bull', '137'], type: <class 'list'>
2025-06-12 01:01:55 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['4', 'George Russell', 'British', 'Mercedes', '111'], type: <class 'list'>
2025-06-12 01:01:56 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['5', 'Charles Leclerc', 'Monegasque', 'Ferrari', '94'], type: <class 'list'>
2025-06-12 01:01:56 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['6', 'Lewis Hamilton', 'British', 'Ferrari', '71'], type: <class 'list'>
2025-06-12 01:01:57 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['7', 'Andrea Kimi Antonelli', 'Italian', 'Mercedes', '48'], type: <class 'list'>
2025-06-12 01:01:57 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['8', 'Alexander Albon', 'Thai', 'Williams', '42'], type: <class 'list'>
2025-06-12 01:01:58 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['9', 'Isack Hadjar', 'French', 'RB F1 Team', '21'], type: <class 'list'>
2025-06-12 01:01:58 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['10', 'Esteban Ocon', 'French', 'Haas F1 Team', '20'], type: <class 'list'>
2025-06-12 01:01:58 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['11', 'Nico Hülkenberg', 'German', 'Sauber', '16'], type: <class 'list'>
2025-06-12 01:01:59 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['12', 'Lance Stroll', 'Canadian', 'Aston Martin', '14'], type: <class 'list'>
2025-06-12 01:01:59 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['13', 'Carlos Sainz', 'Spanish', 'Williams', '12'], type: <class 'list'>
2025-06-12 01:01:59 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['14', 'Pierre Gasly', 'French', 'Alpine F1 Team', '11'], type: <class 'list'>
2025-06-12 01:02:00 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['15', 'Yuki Tsunoda', 'Japanese', 'RB F1 Team', '10'], type: <class 'list'>
2025-06-12 01:02:00 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['16', 'Oliver Bearman', 'British', 'Haas F1 Team', '6'], type: <class 'list'>
2025-06-12 01:02:01 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['17', 'Liam Lawson', 'New Zealander', 'Red Bull', '4'], type: <class 'list'>
2025-06-12 01:02:01 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['18', 'Fernando Alonso', 'Spanish', 'Aston Martin', '2'], type: <class 'list'>
2025-06-12 01:02:02 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['19', 'Gabriel Bortoleto', 'Brazilian', 'Sauber', '0'], type: <class 'list'>
2025-06-12 01:02:02 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['20', 'Jack Doohan', 'Australian', 'Alpine F1 Team', '0'], type: <class 'list'>
2025-06-12 01:02:02 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:02:02 - 10620 - __main__ - mcp_sse_server.py:94 - INFO - val: ['21', 'Franco Colapinto', 'Argentine', 'Alpine F1 Team', '0'], type: <class 'list'>
2025-06-12 01:02:03 - 5232 - action - action.py:34 - INFO - meta=None content=[TextContent(type='text', text='https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', annotations=None)] isError=False
2025-06-12 01:02:03 - 5232 - google_genai.models - models.py:5622 - INFO - AFC is enabled with max remote calls: 10.
2025-06-12 01:02:04 - 5232 - httpx - _client.py:1025 - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-06-12 01:02:04 - 5232 - google_genai.models - models.py:5633 - INFO - AFC remote call 1 is done.
2025-06-12 01:02:04 - 5232 - __main__ - mcp_sse_client.py:44 - INFO - LLM response: candidates=[Candidate(content=Content(parts=[Part(video_metadata=None, thought=None, inline_data=None, code_execution_result=None, executable_code=None, file_data=None, function_call=None, function_response=None, text='{\n  "function_name": "send_email",\n  "params": [\n    "https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M",\n    "bhole.atul@gmail.com"\n  ],\n  "final_ans": "None",\n  "reasoning_type": "search"\n}')], role='model'), citation_metadata=None, finish_message=None, token_count=None, finish_reason=<FinishReason.STOP: 'STOP'>, url_context_metadata=None, avg_logprobs=-2.577381685182874e-06, grounding_metadata=None, index=None, logprobs_result=None, safety_ratings=None)] create_time=None response_id=None model_version='gemini-2.0-flash' prompt_feedback=None usage_metadata=GenerateContentResponseUsageMetadata(cache_tokens_details=None, cached_content_token_count=None, candidates_token_count=106, candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=106)], prompt_token_count=2543, prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=2543)], thoughts_token_count=None, tool_use_prompt_token_count=None, tool_use_prompt_tokens_details=None, total_token_count=2649, traffic_type=None) automatic_function_calling_history=[] parsed=Response(function_name='send_email', params=['https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'bhole.atul@gmail.com'], final_ans='None', reasoning_type='search')
2025-06-12 01:02:04 - 5232 - __main__ - mcp_sse_client.py:51 - INFO - Parsed llm response: {'function_name': 'send_email', 'params': ['https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'bhole.atul@gmail.com'], 'final_ans': 'None', 'reasoning_type': 'search'}
2025-06-12 01:02:04 - 5232 - action - action.py:13 - INFO - Executing tool: name='send_email' description='\nSends the link as email using Gmail API.\n\nParameters:\n- link (str): link to be emailed\n- recepient (str): email address to which the link has to be emailed\n\nExample:\n    send_email("https:docs.google.com", "abc@example.com")\n' inputSchema={'properties': {'link': {'title': 'Link', 'type': 'string'}, 'recipient': {'title': 'Recipient', 'type': 'string'}}, 'required': ['link', 'recipient'], 'title': 'send_emailArguments', 'type': 'object'} annotations=None, with params: ['https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'bhole.atul@gmail.com']
2025-06-12 01:02:04 - 5232 - action - action.py:18 - INFO - param_name: link, info: {'title': 'Link', 'type': 'string'}
2025-06-12 01:02:04 - 5232 - action - action.py:18 - INFO - param_name: recipient, info: {'title': 'Recipient', 'type': 'string'}
2025-06-12 01:02:04 - 5232 - action - action.py:32 - INFO - Sending arguement: {'link': 'https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'recipient': 'bhole.atul@gmail.com'}
2025-06-12 01:02:05 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:02:05 - 10620 - mcp.server.lowlevel.server - server.py:551 - INFO - Processing request of type CallToolRequest
2025-06-12 01:02:05 - 10620 - __main__ - mcp_sse_server.py:142 - INFO - Credentials loaded from token.json
2025-06-12 01:02:05 - 10620 - googleapiclient.discovery_cache - __init__.py:49 - INFO - file_cache is only supported with oauth2client<4.0.0
2025-06-12 01:02:07 - 10620 - __main__ - mcp_sse_server.py:132 - INFO - Message sent to bhole.atul@gmail.com Message Id: 197607a79b8325b5
2025-06-12 01:02:07 - 10620 - __main__ - mcp_sse_server.py:168 - INFO - Email sent
2025-06-12 01:02:07 - 5232 - action - action.py:34 - INFO - meta=None content=[TextContent(type='text', text='Message sent', annotations=None)] isError=False
2025-06-12 01:02:07 - 5232 - google_genai.models - models.py:5622 - INFO - AFC is enabled with max remote calls: 10.
2025-06-12 01:02:09 - 5232 - httpx - _client.py:1025 - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-06-12 01:02:09 - 5232 - google_genai.models - models.py:5633 - INFO - AFC remote call 1 is done.
2025-06-12 01:02:09 - 5232 - __main__ - mcp_sse_client.py:44 - INFO - LLM response: candidates=[Candidate(content=Content(parts=[Part(video_metadata=None, thought=None, inline_data=None, code_execution_result=None, executable_code=None, file_data=None, function_call=None, function_response=None, text='{\n  "function_name": "send_email",\n  "params": [\n    "https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M",\n    "bhole.atul@gmail.com"\n  ],\n  "final_ans": "None",\n  "reasoning_type": "search"\n}')], role='model'), citation_metadata=None, finish_message=None, token_count=None, finish_reason=<FinishReason.STOP: 'STOP'>, url_context_metadata=None, avg_logprobs=-0.014581165223751427, grounding_metadata=None, index=None, logprobs_result=None, safety_ratings=None)] create_time=None response_id=None model_version='gemini-2.0-flash' prompt_feedback=None usage_metadata=GenerateContentResponseUsageMetadata(cache_tokens_details=None, cached_content_token_count=None, candidates_token_count=106, candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=106)], prompt_token_count=2671, prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=2671)], thoughts_token_count=None, tool_use_prompt_token_count=None, tool_use_prompt_tokens_details=None, total_token_count=2777, traffic_type=None) automatic_function_calling_history=[] parsed=Response(function_name='send_email', params=['https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'bhole.atul@gmail.com'], final_ans='None', reasoning_type='search')
2025-06-12 01:02:09 - 5232 - __main__ - mcp_sse_client.py:51 - INFO - Parsed llm response: {'function_name': 'send_email', 'params': ['https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'bhole.atul@gmail.com'], 'final_ans': 'None', 'reasoning_type': 'search'}
2025-06-12 01:02:09 - 5232 - action - action.py:13 - INFO - Executing tool: name='send_email' description='\nSends the link as email using Gmail API.\n\nParameters:\n- link (str): link to be emailed\n- recepient (str): email address to which the link has to be emailed\n\nExample:\n    send_email("https:docs.google.com", "abc@example.com")\n' inputSchema={'properties': {'link': {'title': 'Link', 'type': 'string'}, 'recipient': {'title': 'Recipient', 'type': 'string'}}, 'required': ['link', 'recipient'], 'title': 'send_emailArguments', 'type': 'object'} annotations=None, with params: ['https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'bhole.atul@gmail.com']
2025-06-12 01:02:09 - 5232 - action - action.py:18 - INFO - param_name: link, info: {'title': 'Link', 'type': 'string'}
2025-06-12 01:02:09 - 5232 - action - action.py:18 - INFO - param_name: recipient, info: {'title': 'Recipient', 'type': 'string'}
2025-06-12 01:02:09 - 5232 - action - action.py:32 - INFO - Sending arguement: {'link': 'https://docs.google.com/spreadsheets/d/1m9TPEyMuthdsKJ9H73cBLAi9VdrLuVMshM26Q0jxr8M', 'recipient': 'bhole.atul@gmail.com'}
2025-06-12 01:02:09 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:02:09 - 10620 - mcp.server.lowlevel.server - server.py:551 - INFO - Processing request of type CallToolRequest
2025-06-12 01:02:09 - 10620 - __main__ - mcp_sse_server.py:142 - INFO - Credentials loaded from token.json
2025-06-12 01:02:09 - 10620 - googleapiclient.discovery_cache - __init__.py:49 - INFO - file_cache is only supported with oauth2client<4.0.0
2025-06-12 01:02:11 - 10620 - __main__ - mcp_sse_server.py:132 - INFO - Message sent to bhole.atul@gmail.com Message Id: 197607a8681d346a
2025-06-12 01:02:11 - 10620 - __main__ - mcp_sse_server.py:168 - INFO - Email sent
2025-06-12 01:02:11 - 5232 - action - action.py:34 - INFO - meta=None content=[TextContent(type='text', text='Message sent', annotations=None)] isError=False
2025-06-12 01:02:11 - 5232 - google_genai.models - models.py:5622 - INFO - AFC is enabled with max remote calls: 10.
2025-06-12 01:02:12 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:02:13 - 5232 - httpx - _client.py:1025 - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-06-12 01:02:13 - 5232 - google_genai.models - models.py:5633 - INFO - AFC remote call 1 is done.
2025-06-12 01:02:13 - 5232 - __main__ - mcp_sse_client.py:44 - INFO - LLM response: candidates=[Candidate(content=Content(parts=[Part(video_metadata=None, thought=None, inline_data=None, code_execution_result=None, executable_code=None, file_data=None, function_call=None, function_response=None, text='{\n  "function_name": "finish_task",\n  "params": [\n    "The F1 standings were successfully fetched, uploaded to Google Sheets, and the link was emailed to the recipient."\n  ],\n  "final_ans": "Task completed successfully.",\n  "reasoning_type": "success"\n}')], role='model'), citation_metadata=None, finish_message=None, token_count=None, finish_reason=<FinishReason.STOP: 'STOP'>, url_context_metadata=None, avg_logprobs=-0.004164155986573961, grounding_metadata=None, index=None, logprobs_result=None, safety_ratings=None)] create_time=None response_id=None model_version='gemini-2.0-flash' prompt_feedback=None usage_metadata=GenerateContentResponseUsageMetadata(cache_tokens_details=None, cached_content_token_count=None, candidates_token_count=72, candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=72)], prompt_token_count=2799, prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=2799)], thoughts_token_count=None, tool_use_prompt_token_count=None, tool_use_prompt_tokens_details=None, total_token_count=2871, traffic_type=None) automatic_function_calling_history=[] parsed=Response(function_name='finish_task', params=['The F1 standings were successfully fetched, uploaded to Google Sheets, and the link was emailed to the recipient.'], final_ans='Task completed successfully.', reasoning_type='success')
2025-06-12 01:02:13 - 5232 - __main__ - mcp_sse_client.py:51 - INFO - Parsed llm response: {'function_name': 'finish_task', 'params': ['The F1 standings were successfully fetched, uploaded to Google Sheets, and the link was emailed to the recipient.'], 'final_ans': 'Task completed successfully.', 'reasoning_type': 'success'}
2025-06-12 01:02:13 - 5232 - action - action.py:13 - INFO - Executing tool: name='finish_task' description='Terminates the agent execution by either saying if the search was sucessfull or not.' inputSchema={'properties': {'message': {'title': 'Message', 'type': 'string'}}, 'required': ['message'], 'title': 'finish_taskArguments', 'type': 'object'} annotations=None, with params: ['The F1 standings were successfully fetched, uploaded to Google Sheets, and the link was emailed to the recipient.']
2025-06-12 01:02:13 - 5232 - action - action.py:18 - INFO - param_name: message, info: {'title': 'Message', 'type': 'string'}
2025-06-12 01:02:13 - 5232 - action - action.py:32 - INFO - Sending arguement: {'message': 'The F1 standings were successfully fetched, uploaded to Google Sheets, and the link was emailed to the recipient.'}
2025-06-12 01:02:13 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST http://localhost:9135/messages/?session_id=308cfc48fb624536b15a5d377d09c6e5 "HTTP/1.1 202 Accepted"
2025-06-12 01:02:13 - 10620 - mcp.server.lowlevel.server - server.py:551 - INFO - Processing request of type CallToolRequest
2025-06-12 01:02:13 - 5232 - action - action.py:34 - INFO - meta=None content=[TextContent(type='text', text='{\n  "response": "The F1 standings were successfully fetched, uploaded to Google Sheets, and the link was emailed to the recipient."\n}', annotations=None)] isError=False
2025-06-12 01:02:13 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/sendMessage "HTTP/1.1 200 OK"
2025-06-12 01:02:23 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:02:33 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:02:43 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:02:53 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:03:03 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:03:13 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:03:24 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:03:34 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:03:44 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:03:54 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:04:04 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:04:14 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:04:25 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:04:35 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:04:45 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:04:55 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:05:05 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:05:15 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:05:26 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:05:36 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:05:46 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:05:56 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:06:06 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:06:16 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:06:27 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:06:37 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:06:47 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:06:57 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:07:07 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:07:17 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:07:28 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:07:38 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:07:48 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:07:58 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:08:08 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:08:18 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:08:29 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:08:39 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:08:49 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:08:59 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:09:09 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:09:19 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:09:30 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:09:40 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:09:50 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:10:00 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:10:10 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:10:20 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:10:30 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:10:41 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:10:51 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:11:01 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:11:11 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:11:21 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:11:31 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:11:42 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:11:52 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:12:02 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:12:12 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:12:22 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:12:32 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:12:43 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:12:53 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:13:03 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:13:13 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:13:23 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:13:33 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:13:44 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:13:54 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:14:04 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:14:14 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:14:24 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:14:34 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:14:45 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:14:55 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:15:05 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:15:15 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:15:25 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:15:35 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:15:46 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:15:56 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:16:06 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:16:16 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:16:26 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:16:36 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:16:47 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:16:57 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:17:07 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:17:17 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:17:27 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:17:37 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:17:48 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:17:58 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:18:08 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:18:18 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:18:28 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:18:39 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:18:49 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:18:59 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:19:09 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:19:19 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:19:30 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:19:40 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:19:50 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:20:00 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:20:10 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:20:20 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:20:31 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:20:41 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:20:51 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:21:01 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:21:11 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:21:22 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:21:32 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:21:42 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:21:52 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:22:02 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:22:12 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:22:23 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:22:33 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:22:43 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:22:53 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:23:03 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:23:11 - 5232 - httpx - _client.py:1740 - INFO - HTTP Request: POST https://api.telegram.org/xxxxx/getUpdates "HTTP/1.1 200 OK"
2025-06-12 01:23:11 - 5232 - telegram.ext.Application - _application.py:664 - INFO - Application is stopping. This might take a moment.
2025-06-12 01:23:11 - 5232 - telegram.ext.Application - _application.py:700 - INFO - Application.stop() complete
